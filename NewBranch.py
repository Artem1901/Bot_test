import codecs
import os
import requests
import telebot
import datetime
from telebot import types


token = '5350862817:AAGZcjBItg2uoTzkJG1bMLEoPZQE1HyhiMo'
bot = telebot.TeleBot(token)
d = {"–∏–Ω—Ñ-–∫–∞": '1', "–ª–∏—Ç-—Ä–∞": '2', "–∞–ª–≥–µ–±—Ä–∞": '3', "–∏–Ω–æ –∏—ç": '4', "—Ñ–∏–∑–∏–∫–∞": '5',
     "–≥–µ–æ–º–µ—Ç—Ä–∏—è": '6',
     "—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫": '7', "—Ö–∏–º–∏—è": '8', "–∏—Å—Ç–æ—Ä–∏—è": '9', "–∏–Ω–æ —Å–∞": '0', '–Ω–µ–º–µ—Ü–∫–∏–π —è–∑—ã–∫': 'a',
     '–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è': 'b'}
d1 = {'1': "–∏–Ω—Ñ-–∫–∞", '2': "–ª–∏—Ç-—Ä–∞", '3': "–∞–ª–≥–µ–±—Ä–∞", '4': "–∏–Ω–æ, –≥—Ä—É–ø–ø–∞ –∏—ç", '5': "—Ñ–∏–∑–∏–∫–∞",
      '6': "–≥–µ–æ–º–µ—Ç—Ä–∏—è",
      '7': "—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫", '8': "—Ö–∏–º–∏—è", '9': "–∏—Å—Ç–æ—Ä–∏—è", '0': "–∏–Ω–æ, –≥—Ä—É–ø–ø–∞ —Å–∞", 'a': '–Ω–µ–º–µ—Ü–∫–∏–π —è–∑—ã–∫',
      'b': '–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è'}
wd = {"–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": 1, "–≤—Ç–æ—Ä–Ω–∏–∫": 2, "—Å—Ä–µ–¥–∞": 3, "—á–µ—Ç–≤–µ—Ä–≥": 4, "–ø—è—Ç–Ω–∏—Ü–∞": 5, "—Å—É–±–±–æ—Ç–∞": 6}
time = {1: "09:00-09:40", 2: "09:55-10:35", 3: "10:50-11:30", 4: "11:45-12:25", 5: "12:40-13:20",
        6: "13:35-14:15", 7: "14:25-15:05"}
time_dist = {1: "09:00-09:30", 2: "09:55-10:25", 3: "10:50-11:20", 4: "11:45-12:15", 5: "12:40-13:10",
             6: "13:35-14:05", 7: "14:20-14:50"}
__author1__ = "@Talziar"
__author2__ = "@artemgoriunov"
wdnum = 0
num = 0
anum = 0
zoom_num = 0
chat_id = ""  # demo
channel_id = ""  # demo
stroki = []
urllist = []
usersid = []
op = ['591545559']
operators = set(op)
try:
    with codecs.open('dist.txt', 'r', encoding='utf-8') as fi:
        dist = int(fi.read())
except OSError:
    with codecs.open('dist.txt', 'w', encoding='utf-8') as fi:
        fi.seek(0)
        fi.write('0')
try:
    with codecs.open('whitelist.txt', 'r', encoding='utf-8') as fi:
        stroki = map(int, fi.readlines())
except OSError:
    with codecs.open('whitelist.txt', 'w', encoding='utf-8') as fi:
        fi.seek(0)
whitelist = set(stroki)
try:
    with codecs.open('id.txt', 'r', encoding='utf-8') as fi:
        t = fi.readlines()
        for irt in t:
            usersid.append(int(irt))
        usersidset = set(usersid)
except OSError:
    with codecs.open('id.txt', 'w', encoding='utf-8') as fi:
        fi.seek(0)
    usersidset = set([])
    usersid = []
if 591545559 not in whitelist:
    with codecs.open('whitelist.txt', 'w', encoding='utf-8') as fi:
        fi.write('591545559\n')
actionKeyboard = types.ReplyKeyboardMarkup()
actionKeyboard.row('–£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ \nüìÖ', '–£–∑–Ω–∞—Ç—å –î–ó \nüìñ')
actionKeyboard.row('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã \nüìî', '–£–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ zoom \nüìπ')
actionKeyboard.row('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∞–π–ª—ã \nüìÅ', '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∑ \nüìñ')
subjectKeyboard = types.ReplyKeyboardMarkup(False, True)
subjectKeyboard.row("–ò–Ω—Ñ-–∫–∞", "–õ–∏—Ç-—Ä–∞", "–ê–ª–≥–µ–±—Ä–∞", "–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è")
subjectKeyboard.row("–ò–Ω–æ –ò–≠", "–ò–Ω–æ –°–ê", "–§–∏–∑–∏–∫–∞", "–ì–µ–æ–º–µ—Ç—Ä–∏—è")
subjectKeyboard.row("–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–•–∏–º–∏—è", "–ò—Å—Ç–æ—Ä–∏—è", '–ù–µ–º–µ—Ü–∫–∏–π —è–∑—ã–∫')
timetableKeyboard = types.ReplyKeyboardMarkup(False, True)
timetableKeyboard.row("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞")
timetableKeyboard.row("–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞")


@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, '–ù–∞–∂–º–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ '
                                      '–∏–ª–∏ –Ω–∞–±–µ—Ä–∏ /commands –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.',
                     reply_markup=actionKeyboard)
    if message.from_user.id not in usersidset:
        with codecs.open('id.txt', 'a', encoding='utf-8') as f:
            f.write(str(message.from_user.id) + '\n')
        usersidset.add(message.from_user.id)
        usersid.append(message.from_user.id)


@bot.message_handler(commands=['knowadmin'])
def become_admin(message):
    msg = bot.send_message(message.chat.id, '–°–æ–∑–¥–∞—Ç–µ–ª–∏ - @Talziar, @artemgoriunov')
    bot.send_message(message.chat.id, '–ù–∞–∂–º–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ '
                                      '–∏–ª–∏ –Ω–∞–±–µ—Ä–∏ /commands –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.',
                     reply_markup=actionKeyboard)


@bot.message_handler(commands=['adminrebirth'])
def become_admin(message):
    msg = bot.send_message(message.chat.id, '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É '
                                            '–Ω–∞ —Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º?/n –û—Ç–≤–µ—Ç—å—Ç–µ –¥–∞ –∏–ª–∏ –Ω–µ—Ç')
    bot.register_next_step_handler(msg, becoming_admin)


@bot.message_handler(commands=['commands'])
def help_message(message):
    msg_text = '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n/alltasks - –≤—ã–≤–æ–¥ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–∞ —ç–∫—Ä–∞–Ω\n/belltableshow - –ø–æ–∫–∞–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–≤–æ–Ω–∫–æ–≤\n' \
               '/help - –¥–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏\n' \
               '/adminrebirth - –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω-–ø—Ä–∞–≤\n' \
               '/knowadmin - —É–∑–Ω–∞—Ç—å –∞–≤—Ç–æ—Ä–æ–≤'
    if message.from_user.id in whitelist:
        msg_text += '\n/timetablechange - —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å\n' \
                    '/zoomchange - —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏ –ø–∞—Ä–æ–ª—å –¥–ª—è zoom –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É\n' \
                    '/taskadd - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É\n' \
                    '/announce - —Å–¥–µ–ª–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ'
    if str(message.from_user.id) in operators:
        msg_text += '\n/newadmin - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n/deleteadmin - –∑–∞–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' \
                    '\n/distchange - —Å–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è'
    bot.send_message(message.chat.id, msg_text, reply_markup=actionKeyboard)


@bot.message_handler(commands=['newadmin'])
def add_new_admin(message):
    if str(message.from_user.id) in operators:
        msg = bot.send_message(message.chat.id, "–ö–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–º –∞–¥–º–∏–Ω–∏c—Ç—Ä–∞—Ç–æ—Ä–æ–º?")
        bot.register_next_step_handler(msg, adding_new_admin)
    else:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")


@bot.message_handler(commands=['deleteadmin'])
def delete_admin(message):
    if str(message.from_user.id) in operators:
        msg = bot.send_message(message.chat.id, "–£ –∫–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞?")
        bot.register_next_step_handler(msg, deleting_admin)
    else:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")


@bot.message_handler(commands=['announce'])
def announce(message):
    if message.from_user.id in whitelist:
        msg = bot.send_message(message.chat.id, "–û —á–µ–º —Ç—ã —Ö–æ—á–µ—à—å —Å–æ–æ–±—â–∏—Ç—å?")
        bot.register_next_step_handler(msg, announcement)
    else:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")


@bot.message_handler(commands=['help'])
def admin_help(message):
    msg = bot.send_message(message.chat.id, "–û —á–µ–º —Ç—ã —Ö–æ—á–µ—à—å —Å–æ–æ–±—â–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º?")
    bot.register_next_step_handler(msg, admin_helping)


@bot.message_handler(commands=['alltasks'])
def all_tasks_output(message):
    try:
        with codecs.open('task.txt', encoding='utf-8') as f:
            lines = f.readlines()
    except OSError:
        with codecs.open('task.txt', 'w', encoding='utf-8') as f:
            f.seek(0)
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è")
    else:
        for i in lines:
            if i != '':
                bot.send_message(message.chat.id, d1[i[0]].capitalize() + ': ' + i[2].lower() + i[3:])


@bot.message_handler(commands=['distchange'])
def dist_change(message):
    if str(message.from_user.id) in operators:
        global dist
        try:
            with codecs.open('dist.txt', 'r', encoding='utf-8') as f:
                dist = int(f.read())
        except OSError:
            with codecs.open('dist.txt', 'w', encoding='utf-8') as f:
                f.seek(0)
                f.write('0')
                dist = 0
                bot.send_message(message.chat.id, "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —à–∫–æ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è")
        else:
            with codecs.open('dist.txt', 'w', encoding='utf-8') as f:
                f.seek(0)
                f.write(str(abs(dist - 1)))
                dist = abs(dist - 1)
                if dist == 0:
                    bot.send_message(message.chat.id, "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —à–∫–æ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è")
                else:
                    bot.send_message(message.chat.id, "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è")
    else:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")


@bot.message_handler(commands=['belltableshow'])
def bell_table_show(message):
    belltable = '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤\n'
    for i in range(1, 8):
        belltable += str(i) + ')' + time[i] + '\n'
    bot.send_message(message.chat.id, belltable)
    belltable_dist = '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –≤–æ –≤—Ä–µ–º—è –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è\n'
    for i in range(1, 8):
        belltable_dist += str(i) + ')' + time_dist[i] + '\n'
    bot.send_message(message.chat.id, belltable_dist)


@bot.message_handler(commands=['taskchange'])
def task_change(message):
    if message.from_user.id not in whitelist:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∏–∑–º–µ–Ω—è—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ")
    else:
        msg = bot.send_message(message.chat.id, '–ü–æ –∫–∞–∫–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É —Ç—ã —Ö–æ—á–µ—à—å –≤–Ω–µ—Å—Ç–∏ –¥–∑?', reply_markup=subjectKeyboard)
        bot.register_next_step_handler(msg, subject_input)


@bot.message_handler(commands=['taskadd'])
def task_add(message):
    if message.from_user.id not in whitelist:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∏–∑–º–µ–Ω—è—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ")
    else:
        msg = bot.send_message(message.chat.id, '–ü–æ –∫–∞–∫–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É —Ç—ã —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –¥–∑?',
                               reply_markup=subjectKeyboard)
        bot.register_next_step_handler(msg, subject_add)


@bot.message_handler(commands=['uploadphoto'])
def send_photo(message):
    msg = bot.send_message(message.chat.id, "Go on, honey")
    bot.register_next_step_handler(msg, sending_photo)


def sending_photo(message):
    file_info = bot.get_file(message.photo[-1].file_id)
    msg = bot.send_message(message.chat.id, '–í –∫–∞–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç—å –¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª?',
                           reply_markup=subjectKeyboard)
    bot.register_next_step_handler(msg, get_file_name, file_info)


def get_file_name(message, file_info):
    dr = message.text
    msg = bot.send_message(message.chat.id, "–ö–∞–∫ –Ω–∞–∑–≤–∞—Ç—å —Ñ–æ—Ç–æ?")
    r = requests.get(
        'https://api.telegram.org/file/bot1066163670:AAFsraOqL5QCp-dHXN9J5LaFlBfFXCBuTm8/' + file_info.file_path)
    bot.register_next_step_handler(msg, save_photo, r, dr)


def save_photo(message, r, direct):
    file_name = str(message.text) + '.jpg'
    script_dir = os.path.dirname(os.path.abspath(__file__))
    dest_dir = os.path.join(script_dir, direct)
    try:
        os.makedirs(dest_dir)
    except OSError:
        pass
    path = os.path.join(dest_dir, file_name)
    open(path, 'wb').write(r.content)
    bot.send_message(message.chat.id, "–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ, –≥–æ—Å–ø–æ–¥–∏–Ω!")


@bot.message_handler(commands=['deletephoto'])
def delete_photo(message):
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç, "
                                            "–ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ", reply_markup=subjectKeyboard)
    bot.register_next_step_handler(msg, photo_choose)


def photo_choose(message):
    if show_list_all_photos(message):
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å")
        bot.register_next_step_handler(msg, deleting_photo, message.text)


def deleting_photo(message, direct):
    file_name = message.text
    script_dir = os.path.dirname(os.path.abspath(__file__))
    dest_dir = os.path.join(script_dir, direct)
    file_path = os.path.join(dest_dir, file_name)
    try:
        os.remove(file_path)
    except OSError as e:
        bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        delete_photo(message)
        return
    bot.send_message(message.chat.id, '–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ')


@bot.message_handler(commands=['listallphotos'])
def list_all_photos(message):
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç", reply_markup=subjectKeyboard)
    bot.register_next_step_handler(msg, show_list_all_photos)


def show_list_all_photos(message):
    for root, dirs, files in os.walk(message.text):
        for filename in files:
            dest_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), message.text)
            path = os.path.join(dest_dir, filename)
            img = open(path, 'rb')
            bot.send_photo(message.chat.id, img, filename)
        return True
    bot.send_message(message.chat.id, "–ü–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
    return False


@bot.message_handler(commands=['timetablechange'])
def timetable_change(message):
    if message.from_user.id not in whitelist:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∏–∑–º–µ–Ω—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    else:
        msg = bot.send_message(message.chat.id, '–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?',
                               reply_markup=timetableKeyboard)
        bot.register_next_step_handler(msg, day_input)


@bot.message_handler(commands=['zoomchange'])
def zoom_ind_change_choice(message):
    if message.from_user.id not in whitelist:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∏–∑–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ zoom")
    else:
        msg = bot.send_message(message.chat.id,
                               "–ü–æ –∫–∞–∫–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É —Ç—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ zoom?",
                               reply_markup=subjectKeyboard)
        bot.register_next_step_handler(msg, subject_zoom_input)


@bot.message_handler(content_types=['text'])
def send_text(message):
    st = message.text.lower()
    global whitelist
    if message.chat.id != channel_id and message.chat.id != chat_id:
        if st == "—É–∑–Ω–∞—Ç—å –¥–∑ \nüìñ":
            msg = bot.send_message(message.chat.id, '–ü–æ –∫–∞–∫–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –¥–∑?',
                                   reply_markup=subjectKeyboard)
            bot.register_next_step_handler(msg, task_output)
        elif st == "—É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ \nüìÖ":
            msg = bot.send_message(message.chat.id, '–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?',
                                   reply_markup=timetableKeyboard)
            bot.register_next_step_handler(msg, time_table_output)
        elif st == "—É–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ zoom \nüìπ":
            msg = bot.send_message(message.chat.id,
                                   "–ü–æ –∫–∞–∫–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ zoom?",
                                   reply_markup=subjectKeyboard)
            bot.register_next_step_handler(msg, zoom_ind_out)
        elif st == "–°–ø–∞—Å–∏–±–æ!":
            bell_table_show()
        elif st == "–∏–∑–º–µ–Ω–∏—Ç—å –¥–∑ \nüìñ":
            if message.from_user.id in whitelist:
                msg = bot.send_message(message.chat.id, '–ü–æ –∫–∞–∫–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É —Ç—ã —Ö–æ—á–µ—à—å –≤–Ω–µ—Å—Ç–∏ –¥–∑?',
                                       reply_markup=subjectKeyboard)
                bot.register_next_step_handler(msg, subject_input)
            else:
                bot.send_message(message.chat.id,
                                 "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. "
                                 "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /help.")
        elif st == "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã \nüìî":
            msg_text = '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n/alltasks - –≤—ã–≤–æ–¥ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–∞ —ç–∫—Ä–∞–Ω\n' \
                       '/belltableshow - –ø–æ–∫–∞–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–≤–æ–Ω–∫–æ–≤\n/help - –¥–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏\n' \
                       '/knowadmin - —É–∑–Ω–∞—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞\n' \
                       '/adminrebirth - –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω-–ø—Ä–∞–≤'

            if message.from_user.id in whitelist:
                msg_text += '\n/timetablechange - —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å\n' \
                            '/zoomchange - —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏ –ø–∞—Ä–æ–ª—å –¥–ª—è zoom –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É\n' \
                            '/taskadd - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É\n' \
                            '/announce - —Å–¥–µ–ª–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ\n' \
                            '/uploadphoto - –í—ã–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –≤ –±–æ—Ç–∞'
            if str(message.from_user.id) in operators:
                msg_text += '\n/newadmin - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n' \
                            '/deleteadmin - –∑–∞–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' \
                            '\n/distchange - —Å–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è'
            bot.send_message(message.chat.id, msg_text, reply_markup=actionKeyboard)
        elif st == "–ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∞–π–ª—ã \nüìÅ":
            bot.send_message(message.chat.id, "–§–∞–π–ª—ã –¥–ª—è 10–í:\nhttps://yadi.sk/d/RoGusYVeKUkPcg?w=1",
                             reply_markup=actionKeyboard)
        else:
            bot.send_message(message.chat.id, '–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', reply_markup=actionKeyboard)


@bot.message_handler(content_types=['text'])
def subject_input(subject):
    if subject.text != '/start':
        global num
        try:
            num = d[subject.text.lower()]
        except KeyError:
            msg = bot.reply_to(subject, '–¢–≤–∞—Ä—å –±–æ–ª–æ—Ç–Ω–∞—è, –≤—Å–µ –µ—â–µ –Ω–µ –º–æ–∂–µ—à—å –∑–∞–ø–æ–º–Ω–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã?. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.',
                               reply_markup=subjectKeyboard)
            bot.register_next_step_handler(msg, subject_input)
        else:
            message = bot.reply_to(subject, '–£–∫–∞–∂–∏ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É')
            bot.register_next_step_handler(message, task_input)
    else:
        bot.send_message(subject.chat.id, '–ù–∞–∂–º–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ '
                                          '–∏–ª–∏ –Ω–∞–±–µ—Ä–∏ /commands –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.',
                         reply_markup=actionKeyboard)


@bot.message_handler(content_types=['text'])
def subject_add(subject):
    if subject.text != '/start':
        global anum
        try:
            anum = d[subject.text.lower()]
        except KeyError:
            msg = bot.reply_to(subject, '–¢–≤–∞—Ä—å –±–æ–ª–æ—Ç–Ω–∞—è, –≤—Å–µ –µ—â–µ –Ω–µ –º–æ–∂–µ—à—å –∑–∞–ø–æ–º–Ω–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã?. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.',
                               reply_markup=subjectKeyboard)
            bot.register_next_step_handler(msg, subject_input)
        else:
            try:
                with codecs.open('task.txt', encoding='utf-8') as f:
                    for line in f:
                        if line[0] == anum:
                            msg = bot.reply_to(subject, line[2:] + '\n–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∫ —ç—Ç–æ–º—É –∑–∞–¥–∞–Ω–∏—é?',
                                               reply_markup=actionKeyboard)
                            bot.register_next_step_handler(msg, adding_task)
                            break
                    else:
                        bot.send_message(subject.chat.id, '–î–∑ –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
                                         reply_markup=actionKeyboard)
            except OSError:
                with codecs.open('task.txt', 'w', encoding='utf-8') as f:
                    f.seek(0)
                bot.send_message(subject.chat.id, '–î–∑ –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', reply_markup=actionKeyboard)
    else:
        bot.send_message(subject.chat.id, '–ù–∞–∂–º–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ '
                                          '–∏–ª–∏ –Ω–∞–±–µ—Ä–∏ /commands –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.',
                         reply_markup=actionKeyboard)


@bot.message_handler(content_types=['text'])
def day_input(message):
    if message.text != '/start':
        global wdnum
        try:
            wdnum = wd[message.text.lower()]
        except KeyError:
            msg = bot.reply_to(message, '–¢–∞–∫–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.',
                               reply_markup=timetableKeyboard)
            bot.register_next_step_handler(msg, day_input)
        else:
            message = bot.reply_to(message, '–£–∫–∞–∂–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—Ä–∞–≤–∏–ª—É:\n'
                                            '1)–ï—Å–ª–∏ —É—Ä–æ–∫–∞ –Ω–µ—Ç,—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å blank;\n'
                                            '2)–í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –ë–µ–∑ –ø—Ä–æ–±–µ–ª–∞. –ù–∞–ø—Ä–∏–º–µ—Ä:\n'
                                            'blank,blank,–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞,–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞,–†—É—Å—Å–∫–∏–π —è–∑—ã–∫,–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞,–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π')
            bot.register_next_step_handler(message, time_table_input)
    else:
        bot.send_message(message.chat.id, '–ù–∞–∂–º–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ '
                                          '–∏–ª–∏ –Ω–∞–±–µ—Ä–∏ /commands –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.',
                         reply_markup=actionKeyboard)


@bot.message_handler(content_types=['text'])
def subject_zoom_input(message):
    if message.text != '/start':
        global zoom_num
        try:
            zoom_num = d[message.text.lower()]
        except KeyError:
            msg = bot.reply_to(message, '–¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.',
                               reply_markup=subjectKeyboard)
            bot.register_next_step_handler(msg, subject_zoom_input)
        else:
            msg = bot.reply_to(message,
                               '–£–∫–∞–∂–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ zoom –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç—É, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –≤—ã–±—Ä–∞–ª–∏')
            bot.register_next_step_handler(msg, zoom_ind_in)
    else:
        bot.send_message(message.chat.id, '–ù–∞–∂–º–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ '
                                          '–∏–ª–∏ –Ω–∞–±–µ—Ä–∏ /commands –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.',
                         reply_markup=actionKeyboard)


@bot.message_handler(content_types=['text'])
def time_table_input(message):
    if message.text != '/start':
        lines = []
        try:
            with codecs.open('timetable.txt', 'r', encoding='utf-8') as f:
                lines = f.readlines()
        except OSError:
            with codecs.open('timetable.txt', 'w', encoding='utf-8') as f:
                f.seek(0)
        with codecs.open('timetable.txt', 'w', encoding='utf-8') as f:
            for line in lines:
                if int(line[0]) != wdnum:
                    f.write(line)
            f.seek(0, 2)
            f.write(str(wdnum) + ")" + message.text + '\n')
        bot.reply_to(message, '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ. –¢–µ–±–µ –µ—â–µ —á—Ç–æ-—Ç–æ –Ω—É–∂–Ω–æ?', reply_markup=actionKeyboard)
    else:
        bot.send_message(message.chat.id, '–ù–∞–∂–º–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ '
                                          '–∏–ª–∏ –Ω–∞–±–µ—Ä–∏ /commands –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.',
                         reply_markup=actionKeyboard)


@bot.message_handler(content_types=['text'])
def time_table_output(message):
    if message.text != '/start':
        try:
            chislo = wd[message.text.lower()]
        except KeyError:
            msg = bot.reply_to(message, '–¢–∞–∫–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.',
                               reply_markup=timetableKeyboard)
            bot.register_next_step_handler(msg, time_table_output)
        else:
            try:
                with codecs.open('timetable.txt', encoding='utf-8') as f:
                    for line in f:
                        if int(line[0]) == chislo:
                            items = str(line[2:]).split(',')
                            out = ''
                            if dist == 1:
                                times = time_dist
                            else:
                                times = time
                            for ind, val in enumerate(items, 1):
                                if val == 'blank':
                                    out += str(ind) + ')\n'
                                else:
                                    out += str(ind) + ')' + times[ind] + ' ' + val + '\n'
                            bot.reply_to(message, out, reply_markup=actionKeyboard)
                            break
                    else:
                        bot.send_message(message.chat.id, '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ –∑–∞–Ω–µ—Å–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö',
                                         reply_markup=actionKeyboard)
            except OSError:
                with codecs.open('timetable.txt', 'w', encoding='utf-8') as f:
                    f.seek(0)
                bot.send_message(message.chat.id, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –∑–∞–Ω–µ—Å–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", reply_markup=actionKeyboard)
    else:
        bot.send_message(message.chat.id, '–ù–∞–∂–º–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ '
                                          '–∏–ª–∏ –Ω–∞–±–µ—Ä–∏ /commands –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.',
                         reply_markup=actionKeyboard)


@bot.message_handler(content_types=['text'])
def task_input(task):
    if task.text != '/start':
        now = datetime.datetime.now()
        lines = []
        try:
            with codecs.open('task.txt', 'r', encoding='utf-8') as f:
                lines = f.readlines()
        except OSError:
            with codecs.open('task.txt', 'w', encoding='utf-8') as f:
                f.seek(0)
        with codecs.open('task.txt', 'w', encoding='utf-8') as f:
            for line in lines:
                if line[0] != num:
                    f.write(line)
            f.seek(0, 2)
            f.write(str(num) + ")" + task.text + ". –î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è " + now.strftime("%d-%m-%Y %H:%M") + "\n")
        bot.reply_to(task, '–ó–∞–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ. –¢–µ–±–µ –µ—â–µ —á—Ç–æ-—Ç–æ –Ω—É–∂–Ω–æ?', reply_markup=actionKeyboard)
        """ for i in whitelist:
           try:
               # if not i == task.from_user.id:
               bot.send_message(i, "@" + task.from_user.username +
                               " –∏–∑–º–µ–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É - " +
                                d1[num].capitalize() + '\n–í–æ—Ç –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: ' + task.text)
           except telebot.apihelper.ApiTelegramException:
               continue
           except TypeError:
               bot.send_message(i, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ—Å—Ç—å –ª–∏ —É –≤–∞—Å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
               break
        """
    else:
        bot.send_message(task.chat.id, '–ù–∞–∂–º–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ '
                                       '–∏–ª–∏ –Ω–∞–±–µ—Ä–∏ /commands –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.',
                         reply_markup=actionKeyboard)


""" 
–ü–æ—á–µ–º—É –Ω–µ —Ç–∞–∫, –∏–¥–∏–æ—Ç?
if message.text.lower() == '/start':
        bot.send_message(task.chat.id, '–ù–∞–∂–º–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ '
                                       '–∏–ª–∏ –Ω–∞–±–µ—Ä–∏ /commands –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.',
                         reply_markup=actionKeyboard)
        return
"""


@bot.message_handler(content_types=['text'])
def task_output(message):
    if message.text != '/start':
        global num
        try:
            num = d[message.text.lower()]
        except KeyError:
            msg = bot.reply_to(message, '–¢–≤–∞—Ä—å –±–æ–ª–æ—Ç–Ω–∞—è, –≤—Å–µ –µ—â–µ –Ω–µ –º–æ–∂–µ—à—å –∑–∞–ø–æ–º–Ω–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã? –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.',
                               reply_markup=subjectKeyboard)
            bot.register_next_step_handler(msg, task_output)
        else:
            try:
                with codecs.open('task.txt', encoding='utf-8') as f:
                    for line in f:
                        if line[0] == num:
                            bot.reply_to(message, str(line[2:]).replace(';', '\n'), reply_markup=actionKeyboard)
                            break
                    else:
                        bot.send_message(message.chat.id, '–î–∑ –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
                                         reply_markup=actionKeyboard)
            except OSError:
                with codecs.open('task.txt', 'w', encoding='utf-8') as f:
                    f.seek(0)
                bot.send_message(message.chat.id, '–î–∑ –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', reply_markup=actionKeyboard)
            bot.send_message(message.chat.id, '–¢–µ–±–µ –µ—â–µ —á—Ç–æ-—Ç–æ –Ω—É–∂–Ω–æ?', reply_markup=actionKeyboard)
    else:
        bot.send_message(message.chat.id, '–ù–∞–∂–º–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ '
                                          '–∏–ª–∏ –Ω–∞–±–µ—Ä–∏ /commands –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.',
                         reply_markup=actionKeyboard)


@bot.message_handler(content_types=['text'])
def zoom_ind_in(message):
    if message.text != '/start':
        lines = []
        try:
            with codecs.open('zoom.txt', 'r', encoding='utf-8') as f:
                lines = f.readlines()
        except OSError:
            with codecs.open('zoom.txt', 'w', encoding='utf-8') as f:
                f.seek(0)
        with codecs.open('zoom.txt', 'w', encoding='utf-8') as f:
            for line in lines:
                if line[0] != zoom_num:
                    f.write(line)
            f.seek(0, 2)
            sp = str(message.text).split()
            f.write(str(zoom_num) + ")" + "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä - " + sp[0] + ". " + "–ü–∞—Ä–æ–ª—å - " + sp[1] + "\n")
        bot.reply_to(message, '–î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã. –¢–µ–±–µ –µ—â–µ —á—Ç–æ-—Ç–æ –Ω—É–∂–Ω–æ?', reply_markup=actionKeyboard)
    else:
        bot.send_message(message.chat.id, '–ù–∞–∂–º–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ '
                                          '–∏–ª–∏ –Ω–∞–±–µ—Ä–∏ /commands –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.',
                         reply_markup=actionKeyboard)


@bot.message_handler(content_types=['text'])
def zoom_ind_out(message):
    if message.text != '/start':
        try:
            chislo = d[message.text.lower()]
        except KeyError:
            msg = bot.reply_to(message,
                               '–¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.', reply_markup=subjectKeyboard)
            bot.register_next_step_handler(msg, zoom_ind_out)
        else:
            try:
                with codecs.open('zoom.txt', encoding='utf-8') as f:
                    for line in f:
                        if line[0] == chislo:
                            bot.reply_to(message, line[2:], reply_markup=actionKeyboard)
                            break
                    else:
                        bot.send_message(message.chat.id,
                                         '–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä zoom –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ –≤–Ω–µ—Å–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö',
                                         reply_markup=actionKeyboard)
            except OSError:
                with codecs.open('zoom.txt', 'w', encoding='utf-8') as f:
                    f.seek(0)
                bot.send_message(message.chat.id, "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã zoom –Ω–µ –≤–Ω–µ—Å–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö",
                                 reply_markup=actionKeyboard)
    else:
        bot.send_message(message.chat.id, '–ù–∞–∂–º–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ '
                                          '–∏–ª–∏ –Ω–∞–±–µ—Ä–∏ /commands –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.',
                         reply_markup=actionKeyboard)


@bot.message_handler(content_types=['text'])
def adding_new_admin(message):
    mes = message.text
    if mes != '/start':
        if not mes.isdigit():
            msg = bot.send_message(message.chat.id, "–¢—ã –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
            bot.register_next_step_handler(msg, adding_new_admin)
        else:
            whitelist.add(int(mes))
            try:
                with codecs.open('whitelist.txt', 'r', encoding='utf-8') as f:
                    lines = f.readlines()
            except OSError:
                with codecs.open('whitelist.txt', 'w', encoding='utf-8') as f:
                    f.seek(0)
            with codecs.open('whitelist.txt', 'w', encoding='utf-8') as f:
                for line in lines:
                    if int(line) != int(mes):
                        f.write(line)
                f.seek(0, 2)
                f.write(mes + '\n')
            bot.send_message(message.chat.id, "–ù–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    else:
        bot.send_message(message.chat.id, '–ù–∞–∂–º–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ '
                                          '–∏–ª–∏ –Ω–∞–±–µ—Ä–∏ /commands –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.',
                         reply_markup=actionKeyboard)


@bot.message_handler(content_types=['text'])
def deleting_admin(message):
    mes = message.text
    if mes == "383193252":
        bot.send_message(message.chat.id, "–¢—ã –Ω–µ –º–æ–∂–µ—à—å –∑–∞–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É –º–æ–µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è")
    elif mes != '/start':
        if not mes.isdigit():
            msg = bot.send_message(message.chat.id, "–¢—ã –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
            bot.register_next_step_handler(msg, adding_new_admin)
        else:
            whitelist.discard(int(mes))
            try:
                with codecs.open('whitelist.txt', 'r', encoding='utf-8') as f:
                    lines = f.readlines()
            except OSError:
                with codecs.open('whitelist.txt', 'w', encoding='utf-8') as f:
                    f.seek(0)
            with codecs.open('whitelist.txt', 'w', encoding='utf-8') as f:
                for line in lines:
                    if int(line) != int(mes):
                        f.write(line)
            bot.send_message(message.chat.id, "–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑–∞–±—Ä–∞–Ω—ã")
    else:
        bot.send_message(message.chat.id, '–ù–∞–∂–º–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ '
                                          '–∏–ª–∏ –Ω–∞–±–µ—Ä–∏ /commands –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.',
                         reply_markup=actionKeyboard)


@bot.message_handler(content_types=['text'])
def announcement(message):
    # bot.forward_message(chat_id, message.from_user.id, message.message_id)
    for i in usersid:
        try:
            if not i == message.from_user.id:
                bot.send_message(i, "–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) " + "@" + message.from_user.username +
                                 " –ø–æ–ø—Ä–æ—Å–∏–ª(–∞) –º–µ–Ω—è –ø–µ—Ä–µ–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:", "\n" + message.text)
        except telebot.apihelper.ApiTelegramException:
            continue
    bot.send_message(message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")


@bot.message_handler(content_types=['text'])
def admin_helping(message):
    if message.text != '/start':
        for i in whitelist:
            try:
                if not i == message.from_user.id:
                    bot.send_message(i,
                                     "–õ–∏—á–Ω–æ—Å—Ç—å —Å –∏–º–µ–Ω–µ–º " + "@" + message.from_user.username +
                                     " –ø–æ–ø—Ä–æ—Å–∏–ª–æ –º–µ–Ω—è –ø–µ—Ä–µ–¥–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º:", "\n" + str(message.text))
            except telebot.apihelper.ApiTelegramException:
                continue
            except TypeError:
                msg = bot.send_message(message.chat.id, '–¢—ã –≤–≤–µ–ª(–∞) —á—Ç–æ-—Ç–æ –Ω–µ—Ç —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑')
                bot.register_next_step_handler(msg, admin_help)
        bot.send_message(message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    else:
        bot.send_message(message.chat.id, '–ù–∞–∂–º–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ '
                                          '–∏–ª–∏ –Ω–∞–±–µ—Ä–∏ /commands –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.',
                         reply_markup=actionKeyboard)


@bot.message_handler(content_types=['text'])
def becoming_admin(message):
    if message.text == '/start':
        bot.send_message(message.chat.id, '–ù–∞–∂–º–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ ' + '–∏–ª–∏ –Ω–∞–±–µ—Ä–∏ /commands –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.',
                         reply_markup=actionKeyboard)
        return
    if message.text.lower() == '–¥–∞':
        try:
            name = message.from_user.first_name + ' ' + message.from_user.last_name
            user_id = str(message.from_user.id)
            bot.send_message(383193252, name + ' —Ö–æ—á–µ—Ç —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–æ–º. ' + '–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã? –í–æ—Ç –µ–≥–æ –∞–π–¥–∏:' + '\n' + user_id)
        except TypeError:
            msg = bot.send_message(message.chat.id,
                                   'Something is wrong. Do you have both firstname and surname in Telegram?')
            bot.register_next_step_handler(msg, becoming_admin)
    elif message.text.lower() == '–Ω–µ—Ç':
        bot.send_message(message.chat.id, '–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω')
    else:
        msg = bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫. –¢–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º? –¥–∞/–Ω–µ—Ç')
        bot.register_next_step_handler(msg, becoming_admin)


@bot.message_handler(content_types=['text'])
def adding_task(message):
    mes = message.text
    if mes != '/start':
        lines = []
        try:
            with codecs.open('task.txt', 'r', encoding='utf-8') as f:
                lines = f.readlines()
        except OSError:
            with codecs.open('task.txt', 'w', encoding='utf-8') as f:
                f.seek(0)
        with codecs.open('task.txt', 'w', encoding='utf-8') as f:
            for line in lines:
                if line[0] != anum:
                    f.write(line)
                else:
                    f.seek(0, 2)
                    f.write(line[:-1] + ' ' + mes + '\n')
        bot.reply_to(message, '–ó–∞–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ. –¢–µ–±–µ –µ—â–µ —á—Ç–æ-—Ç–æ –Ω—É–∂–Ω–æ?', reply_markup=actionKeyboard)
    else:
        bot.send_message(message.chat.id, '–ù–∞–∂–º–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ '
                                          '–∏–ª–∏ –Ω–∞–±–µ—Ä–∏ /commands –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.',
                         reply_markup=actionKeyboard)


bot.polling(none_stop=True)
